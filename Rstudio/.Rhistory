#by함수: 데이터프레임을 그룹별로 처리
by(iris, iris$Species,summary)
by(iris, iris$Species,function(x) mean(x))
by(iris, iris$Species,function(x) mean(x$Sepal.Length))
rowsum(iris[-5],iris$Species)
tabulate(car$gear)
table(car$gear)
1:length(tabulate(car$gear))
table(car$gear,car$gear)
# xtabs함수: table함수와 동일한 기능, 포뮬러 사용
xtabs(~am,car)
xtabs(~am+gear,car)
xtabs(~am+gear+cyl,car)
xtabs(~am+gear,car)
aggregate(mpg~cyl+am,car,mean)
#분할(S)-적용(A)-결합(C)작업을 수월하게 할 수 있도록 도움
#dplyr 라이브러리
#메인함수:mutate(), select(), filter(),summarize(), arrange()
library(dplyr)
filter(airquality,Month=6)
#분할(S)-적용(A)-결합(C)작업을 수월하게 할 수 있도록 도움
#dplyr 라이브러리
#메인함수:mutate(), select(), filter(),summarize(), arrange()
library(dplyr)
filter(airquality,Month=6)
#분할(S)-적용(A)-결합(C)작업을 수월하게 할 수 있도록 도움
#dplyr 라이브러리
#메인함수:mutate(), select(), filter(),summarize(), arrange()
airquality
filter(airquality,Month==6)
#분할(S)-적용(A)-결합(C)작업을 수월하게 할 수 있도록 도움
#dplyr 라이브러리
#메인함수:mutate(), select(), filter(),summarize(), arrange()
str(airquality)
library(dplyr)
filter(airquality,Month==6)
#filter(data,조건):조건을 만족하는 행 추출
air6<-filter(airquality,Month==6)
head(air6)
subset?
subset(airquality,)
?subset
subset(airquality,Month=6)
subset(airquality,subset=(Month==6))
filter(airquality,Month==6,Temp>90)
filter(airquality,Month==6&Temp>90)
filter(airquality,Month==6andTemp>90)
filter(airquality,Month==6|Temp>90)
train<-read.csv('data/train.csv',na.strings = "")
str(train)
summary(train)
head(train)
# 2. Pclass 열 요약
# - 등실 비율
prop.table(train$Pclass)
# 2. Pclass 열 요약
# - 등실 비율
prop.table(train$Pclass,1)
# 2. Pclass 열 요약
# - 등실 비율
table(train$Pclass)
# 2. Pclass 열 요약
# - 등실 비율
table(train$Pclass)/nrow(train$Pclass)
# 2. Pclass 열 요약
# - 등실 비율
table(train$Pclass)/nrows(train$Pclass)
# 2. Pclass 열 요약
# - 등실 비율
table(train$Pclass)/nrow(train)
rownames(mydata)<-sprintf('s-%d',seq(5))
# prop.table(data, margin)로 비율 구하기
# sprintf('',벡터) #문자+ 연속되는 숫자 결합
mydata<-matrix(sample(100,15),ncol=3)
colnames(mydata)<-LETTERS[seq(1,3)]
mydata
rownames(mydata)<-sprintf('s-%d',seq(5))
prop.table(mydata)
sum(prop.table(mydata))
prop.table(mydata,1) #행기준
aggregate(train,list(train$Pclass),length)
aggregate(train$Pclass,list(train$Pclass),length)
aggregate(train$Pclass,list(train$Pclass),function(x) length(x)/length(train))
aggregate(train$Pclass,list(train$Pclass),function(x) length(x)/nrow(train))
aggregate(train$Pclass,list(train$Pclass),function(perc) length(perc)/nrow(train))
aggregate(train$Pclass,list(train$Pclass),function(x) length(x)/nrow(train))
with(train,tapply(Pclass, Pclass, function(x)length(x)/nrow(train)))
# - 등실에 따른 생존자/사망자 비율
with(train,tapply(Pclass, list(Pclass,Survived), length))
# - 등실에 따른 생존자/사망자 비율
proportion(with(train,tapply(Pclass, list(Pclass,Survived), length)))
# - 등실에 따른 생존자/사망자 비율
proportions(with(train,tapply(Pclass, list(Pclass,Survived), length)))
# - 등실에 따른 생존자/사망자 비율
proportions(with(train,tapply(Pclass, list(Pclass,Survived), length)),1)
# 3. Age 열
# - 나이대를 구분한 후, 각 나이대별 생존율
library(dplyr)
with(train,cut(age,breaks = c(0,10,20,30,40,50),include.lowest = T)
with(train,cut(age,breaks = c(0,10,20,30,40,50),include.lowest = T))
with(train,cut(age,breaks = c(0,10,20,30,40,50),include.lowest = T))
# 3. Age 열
# - 나이대를 구분한 후, 각 나이대별 생존율
with(train,cut(age,breaks = c(0,10,20,30,40,50,max(age)),include.lowest = T))
# 3. Age 열
# - 나이대를 구분한 후, 각 나이대별 생존율
with(train,cut(age,breaks = c(0,10,20,30,40,50,60),include.lowest = T))
with(train,cut(Age,breaks = c(0,10,20,30,40,50,60),include.lowest = T))
train$catAge<-with(train,cut(Age,breaks = c(0,10,20,30,40,50,60),include.lowest = T))
train$catAge
with(train,aggregate(Survived,carAge))
with(train,aggregate(Survived,carAge,sum))
with(train,aggregate(Survived,catAge,sum))
with(train,aggregate(Survived,list(catAge),sum))
with(train,aggregate(Survived,list(catAge,Survived),mean))
with(train,aggregate(Survived,list(catAge,Survived),count))
with(train,aggregate(Survived,list(catAge,Survived),length))
with(train,tapply(Survived,list(catAge,Survived),length))
with(train,tapply(Survived,list(catAge,Survived),table))
with(train,tapply(Survived,list(catAge,Survived),prop.table))
with(train,tapply(Survived,list(catAge,Survived),table))
with(train,tapply(Survived,list(catAge,Survived),length))
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
train$catAge<-with(train,cut(Age,breaks = c(0,10,20,30,40,50,60,70),include.lowest = T))
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
# 3. Age 열
# - 나이대를 구분한 후, 각 나이대별 생존율
max(train$Age)
# 3. Age 열
# - 나이대를 구분한 후, 각 나이대별 생존율
max(train$Age,na.rm = T)
train$catAge<-with(train,cut(Age,breaks = c(0,10,20,30,40,50,60,max(train$Age,na.rm = T)),include.lowest = T))
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
with(train,tapply(Survived,list(catAge,Survived)))
proportions(
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
# 4. Fare 열
# - 운임을 전체 5개 구간으로 분리한 후,
# 각 구간별 생존율
catFare<-with(train,cut(fare,5,include.lowest=T))
# 4. Fare 열
# - 운임을 전체 5개 구간으로 분리한 후,
# 각 구간별 생존율
catFare<-with(train,cut(Fare,5,include.lowest=T))
catFare
# 4. Fare 열
# - 운임을 전체 5개 구간으로 분리한 후,
# 각 구간별 생존율
max(train$Fare)
train$catFare<-carFare
train$catFare<-catFare
with(train,tapply(Survived,catFare))
with(train,tapply(Survived,catFare),sum)
with(train,tapply(Survived,catFare),sum))
with(train,tapply(Survived,catFare),sum)
with(train,table(Survived,carFare))
with(train,table(Survived,catFare))
with(train,prop.table(Survived,catFare))
with(train,table(Survived,catFare))
proportions(with(train,table(Survived,catFare)),2)
# 5. Name 열
# - 호칭을 제외한 이름에서 자음과 모음의 비율
# - 성별에 따른 자음과 모음의 비율
head(train$Name)
strsplit(train$Name)
strsplit(train$Name,' ')
grep('//.',strsplit(train$Name,' '))
grep('[.]',strsplit(train$Name,' '))
grep('[.]',strsplit(train$Name,' '),value = T)
strsplit(train$Name,' ')
unlist(strsplit(train$Name,' '))
grep('.$',unlist(strsplit(train$Name,' ')),value = T)
grep('.$',unlist(strsplit(train$Name,' ')),value = T)
grep('.',unlist(strsplit(train$Name,' ')),value = T)
unlist(strsplit(train$Name,' '))
grep('.*.',unlist(strsplit(train$Name,' ')),value = T)
grep('[.]$',unlist(strsplit(train$Name,' ')),value = T)
grep('[.]$',unlist(strsplit(train$Name,' ')))
name2<-unlist(strsplit(train$Name,' '))
# 5. Name 열
# - 호칭을 제외한 이름에서 자음과 모음의 비율
# - 성별에 따른 자음과 모음의 비율
head(train$Name)
name2<-unlist(strsplit(train$Name,' '))
name2[-grep('[.]$',name2)]
name3<-name2[-grep('[.]$',name2)]
paste(name3)
paste(name3,collapse = '')
count(paste(name3,collapse = ''))
strsplit(paste(name3,collapse = ''),'')
?lowers
unlist(strsplit(paste(name3,collapse = ''),''))
tolower(unlist(strsplit(paste(name3,collapse = ''),'')))
name4<-tolower(unlist(strsplit(paste(name3,collapse = ''),'')))
grep('[aeiou]',name4)
length(grep('[aeiou]',name4))
name4[grep('[aeiou]',name4)]<-'mother'
name4[-grep('[[:alpha:]]',name4)]<-NULL
name4[-grep('[[:alpha:]]',name4)]
name4[-grep('[[:alpha:]]',name4)]<-NULL
name4[-grep('[[:alpha:]]',name4)]<-NaN
name4[-grep('[[:alpha:]]',name4)]
name4[-grep('[[:alpha:]]',name4)]
name4[-grep('[aeiou]',name4)]
name4[-grep('[aeiou]',name4)]<-'son'
table(name4)
proportions(table(name4))
strsplit(train$Name,' ')
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),as.data.frame)
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),cbind)
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),rbind)
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),as.vector)
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),as.vector,tolower)
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),as.vector)
# - 성별에 따른 자음과 모음의 비율
tolower(lapply(strsplit(train$Name,' '),as.vector))
# - 성별에 따른 자음과 모음의 비율
lapply(strsplit(train$Name,' '),as.vector)
name3<-lapply(name2,grep,pattern='[^.]',value=T)
name3
# - 성별에 따른 자음과 모음의 비율
name2<-lapply(strsplit(train$Name,' '),as.vector)
name3<-lapply(name2,grep,pattern='[.]',value=T)
name3
name3<-sapply(name2,grep,pattern='[.]',value=T)
name3
head(train$Name)
name2<-unlist(strsplit(train$Name,' '))
name3<-name2[-grep('[.]$',name2)]
name3
code<-name2[grep('[.]$',name2)]
code
unique(code)
train$Name
gsub(', .*[.]','',train$Name)
name2<-gsub(', .*[.]','',train$Name)
strsplit(name2,'')
lapply(strsplit(name2,''),function(x) paste(x))
lapply(strsplit(name2,''),grep,pattern='[[:alpha:]]',value=T)
name2<-gsub(', .*[.]','',train$Name)
name2
name2<-tolower(gsub(', .*[.]','',train$Name))
name2
lapply(strsplit(name2,''),grep,pattern='[[:alpha:]]',value=T)
lapply(strsplit(name2,''),function(x){
ifelse(x %in% c('a','e','i','o','u'),'M','S')}
)
name2<-lapply(strsplit(name2,''),grep,pattern='[[:alpha:]]',value=T)
lapply(strsplit(name2,''),function(x){
ifelse(x %in% c('a','e','i','o','u'),'M','S')}
)
lapply(name2,function(x){
ifelse(x %in% c('a','e','i','o','u'),'M','S')}
)
lapply(name2,function(x){
alpha=ifelse(x %in% c('a','e','i','o','u'),'M','S')
table(alpha)
}
)
ifelse(x %in% c('a','e','i','o','u'),'M','S')
lapply(name2,function(x){
ifelse(x %in% c('a','e','i','o','u'),'M','S')
}
)
lapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
)
sapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
)
lapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
)
as.data.frame(lapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
))
lapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
)
lapply(name2,function(x){
x=proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
as.data.frame(x)
}
)
lapply(name2,function(x){
x=proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
rbind(x)
}
)
lapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
)
str(lapply(name2,function(x){
proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
}
))
str(lapply(name2,function(x){
a=proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
as.vector(a)
}
))
name3<-lapply(name2,function(x){
a=proportions(table(ifelse(x %in% c('a','e','i','o','u'),'M','S')))
as.vector(a)
}
)
str(name3)
lapply(name3,rbind)
as.data.frame(lapply(name3,rbind))
lapply(name3,rbind)
lapply(name3,rbind)
data.frame(lapply(name3,rbind))
do.call(rbind,name3)
as.data.frame(do.call(rbind,name3))
name4<-as.data.frame(do.call(rbind,name3))
library(dplyr)
rename(name4,Mratio=v1,Sratio=v2)
colnames(name4)
colnames(name4)<-c('Mratio','Sratio')
train<-cbind(train,name4)
train$Sex
with(train,aggregate(c(Mratio,Sratio),list(Sex)))
with(train,split(c(Mratio,Sratio),list(Sex)))
with(train,aggregate(c(Mratio,Sratio),list(Sex),function(x) x))
aggregate(train[c('Mratio','Sratio')],list(Sex),function(x) x)
aggregate(train[c('Mratio','Sratio')],list(train$Sex),function(x) x)
name2<-tolower(gsub(', .*[.]','',train$Name))
name2<-lapply(strsplit(name2,''),grep,pattern='[[:alpha:]]',value=T)
name3<-lapply(name2,function(x){
a=table(ifelse(x %in% c('a','e','i','o','u'),'M','S'))
as.vector(a)
}
)
name4<-as.data.frame(do.call(rbind,name3))
colnames(name4)<-c('Mratio','Sratio')
train<-cbind(train,name4)
train$Sex
str(train)
train<-read.csv('data/train.csv',na.strings = "")
str(train)
summary(train)
head(train)
# 2. Pclass 열 요약
# - 등실 비율
table(train$Pclass)/nrow(train)
with(train,tapply(Pclass, Pclass, function(x)length(x)/nrow(train)))
aggregate(train$Pclass,list(train$Pclass),function(x) length(x)/nrow(train))
# - 등실에 따른 생존자/사망자 비율
proportions(with(train,tapply(Pclass, list(Pclass,Survived), length)),1)
train$catAge<-with(train,cut(Age,breaks = c(0,10,20,30,40,50,60,max(train$Age,na.rm = T)),include.lowest = T))
proportions(with(train,tapply(Survived,list(catAge,Survived),length)),1)
# 4. Fare 열
# - 운임을 전체 5개 구간으로 분리한 후,
# 각 구간별 생존율
catFare<-with(train,cut(Fare,5,include.lowest=T))
train$catFare<-catFare
proportions(with(train,table(Survived,catFare)),2)
head(train$Name)
name2<-unlist(strsplit(train$Name,' '))
name3<-name2[-grep('[.]$',name2)]
name4<-tolower(unlist(strsplit(paste(name3,collapse = ''),'')))
name4[grep('[aeiou]',name4)]<-'mother'
name4[-grep('[[:alpha:]]',name4)]<-NaN
name4[-grep('[aeiou]',name4)]<-'son'
proportions(table(name4))
name2<-tolower(gsub(', .*[.]','',train$Name))
name2<-lapply(strsplit(name2,''),grep,pattern='[[:alpha:]]',value=T)
name3<-lapply(name2,function(x){
a=table(ifelse(x %in% c('a','e','i','o','u'),'M','S'))
as.vector(a)
}
)
name4<-as.data.frame(do.call(rbind,name3))
colnames(name4)<-c('Mratio','Sratio')
train<-cbind(train,name4)
str(train)
train$Sex
str(train)
aggregate(train[c('Mratio','Sratio')],list(train$Sex),sum)
library(dplyr)
rename(train,Mnum=Mratio,Snum=Sratio)
str(rename(train,Mnum=Mratio,Snum=Sratio))
train<-rename(train,Mnum=Mratio,Snum=Sratio)
aggregate(train[c('Mratio','Sratio')],list(train$Sex),sum)
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)
apply(train[c('Mnum','Snum')],2,sum)
proportions(apply(train[c('Mnum','Snum')],2,sum))
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)
proportions(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum),1)
aggregate(train[c('Mnum','Snum')],list(train$Sex)
# 6. Embarked 열
# 6. Embarked 열
# - 각 승선 항구별 생존율
# 6. Embarked 열
# - 각 승선 항구별 생존율
#
aggregate(train[c('Mnum','Snum')],list(train$Sex)
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)
as.array(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum))
str(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum))
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)
str(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum))
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)[2:3,2:3]
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)[1:2,1:2]
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)[1:2,2:2]
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)[1:2,2:3]
proportion(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)[1:2,2:3],1)
proportions(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)[1:2,2:3],1)
proportions(as.array(aggregate(train[c('Mnum','Snum')],list(train$Sex),sum))[1:2,2:3],1)
aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)
name5<-aggregate(train[c('Mnum','Snum')],list(train$Sex),sum)
rowsum(name5)
rowsum(name5[1:2,2:3])
str(name5)
rownames(name5)<-name5$Group.1
name5
name5$Group.1<-NULL
name5
apply(name5,1,sum)
apply(name5,1,x/sum)
apply(name5,1,funtion(x) x/sum(x))
apply(name5,1,function(x) x/sum(x))
# 6. Embarked 열
# - 각 승선 항구별 생존율
train$Embarked
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,Embarked,table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),prop.table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),prop.table,margin=1))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),prop.table,margin=2))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),function(x) proportions(table(x),1))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),function(x) proportions(table(x),1)))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),function(x) proportions(table(x),1)))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),function(x) table(x)))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked),length))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,aggregate(Survived,list(Embarked,Survived),length))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),length))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),function(x) prop.table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),function(x) proportions(table(x))))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),function(x) proportions(table(x),1)))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),table)
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),table)
)# 7. 캐글 가입
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),table))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),length))
# 6. Embarked 열
# - 각 승선 항구별 생존율
str(with(train,tapply(Survived,list(Embarked,Survived),length)))
# 6. Embarked 열
# - 각 승선 항구별 생존율
with(train,tapply(Survived,list(Embarked,Survived),length))
# 6. Embarked 열
# - 각 승선 항구별 생존율
apply(with(train,tapply(Survived,list(Embarked,Survived),length)),1,function(x) x/sum(x))
