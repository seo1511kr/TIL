sum(1:5)
sum(1:2,3)
sum(1:2,3:5)
sum(TRUE,FALSE,TRUE)
sum(x>50)
any(x>50)
all(x>50)
# 2의 제곱근의 제곱은 2가 안나옴, 부동소수점수 연산
sqrt(2)^2==2
sqrt(2)^2-2
all.equal(sqrt(2)^2,2)
fruits<-c('Apple','Banana','Strawberry')
food<-c('Pie','Juice','Cake')
fruits+food
# fruits+food error
paste(fruits,food)
# 문자열 다루기 paste():문자벡터 결합
fruits<-c('Apple','Banana','Strawberry','Chocolate')
# fruits+food error
paste(fruits,food)
paste(fruits,'Juice')
# 문자열 다루기 paste():문자벡터 결합
fruits<-c('Apple','Banana','Strawberry','Mango')
# fruits+food error
paste(fruits,food) #길이 알아서 맞춤
paste(fruits,'Juice')
# abs(): 절대값
x<- -3:3
abs(x)
# log(): 자연로그
log(x)
# log(): 자연로그
log(abs(x))
log(abs(x),2)
log2(abs(x))
log10(1:10)
exp(1:5)
log(y)
exp(1:5)
log(y)
y<-exp(1:5)
log(y)
#factorial
factoria(1:5)
#factorial
factorial(1:5)
choose(1:5)
choose(5,2)
y<-exp(1:5,base=2)
?exp
#sqrt()
sqrt(1:5)
#exp: 밑수가 e인 지수값
y<-exp(1:5)
y
#유효자릿수 확인
options('digits')
signif(456.789, digits=2)
signif(456.789, digits=2)
signif(456.789, digits=3)
signif(456.789, digits=4)
signif(456.7891, digits=6)
round(456.789,digits=1)
round(456.789,digits=2)
x<-1:10
round(sqrt(x),digits=3)
round(sqrt(x),digits=2)
round(456.789,digits=-1)
round(456.789,digits=-2)
round(456.785,digits=2)
round(12.5)
round(13.5)
round(13.55)
round(13.55,1)
round(13.65,1)
# floor, ceiling, trunc
floor(456.78)
ceiling(456.78)
trunc(456.78)
floor(456.78)
floor(-456.78)
ceiling(456.78)
ceiling(-456.78)
trunc(456.78)
trunc(-456.78)
# infinity 다루기
3/0
5-Inf
Inf*Inf
Inf*(-Inf)
10^306
is.infinite(10^(306:310))
is.nan(sqrt(-2))
# NaN(Not a Number: 숫자가 아님, 계산 결과를 정의할 수 없다.)
Inf/Inf
Inf*0
log(-2)
NaN+3
is.nan(sqrt(-2))
is.nan(Inf/Inf)
k+2
sqrt(NA)
# NA(Not Available, 결측값)
k<- NA
k+2
sqrt(NA)
z<-1:5
z
sum(z)
prod(z)
z<-1:6
z
sum(z)
prod(z)
min(z)
max(Z)
mean(z)
median(z)
var(z)
sd(z)
range(z)
z<-c(z,NA)
z
sum(z)
sum(z, na.rm=TRUE)
na.omit(z)
sum(na.omit(z))
cumsum(traffic.death)
# cumsum함수: 누적합
traffic.death <- c(10,20,30,20)
cumsum(traffic.death)
traffic.death <- c(10,20,NA,20)
cumsum(traffic.death)
diff(traffic.death)
traffic.death <- c(10,20,30,20)
diff(traffic.death)
traffic.death <- c(10,20,NA,20,30) # NA이후부터 고장남
cumsum(traffic.death)
traffic.death <- c(10,20,NA,20,10)
diff(traffic.death)
diff(1:10)
diff(1:10, lag=3)
union(p,q)
intersect(p,q)
p<-1:10
q<-6:15
union(p,q)
intersect(p,q)
setdiff(p,q)
setequal(p,q)
is.element(6,1:5)
# 첫 번째 인수에 오는 값이 두번째 벡터의 원소인지 테스트
# is.element()
is.element(3,1:5)
is.element(6,1:5)
is.element(4:7,1:5)
num<-0:30
num[5]
num[5:10]
num[[2,5,10,27]]
num[c(2,4,5,10)]
prime[idx]
prime<-c(2,4,3,5,24,33)
idx<-c(1,3,5)
prime[idx]
prime[3:5]
prime[-3]
prime[-2:-4]
prime[-(2:4)]
prime<-c(1:10)
idx<-c(1,3,5)
prime[idx]
prime[3:5]
prime[-3] # 3번 인덱스 빼고 다
prime[-2:-4]
prime[-(2:4)]
prime[1:length(prime)-2]
prime<-c(2,3,5,7,11,13)
length(prime)
prime[1:length(prime)-2]
prime<-c(2,3,5,7,11,13)
length(prime)
prime[1:length(prime)-2]
prime<-c(2,3,5,7,11,13)
length(prime)
prime[1:length(prime)-2]
prime[1:(length(prime)-2)]
prime[-length(prime)]
prime[2]<-30
prime
prime[c(3,4)]<-c(30,40)
prime[c(3,4)]<-c(30,40)]
prime[c(3,4)]<-c(30,40)]
prime[c(3,4)]<-c(30,40)
prime
seq(1,10)
seq(10,1,-1)
c(x,seq(9,1,-1))
seq(10,1,-1)
#
# 2. 3.141592에 대해 반올림 관련 함수를 다양한 방식으로 확인해보시오
#
# ex) siginif(pi, digits=3)
#
signif(pi, digit=2)
#
# 2. 3.141592에 대해 반올림 관련 함수를 다양한 방식으로 확인해보시오
#
# ex) siginif(pi, digits=3)
#
signif(pi, digit=3)
#
# 2. 3.141592에 대해 반올림 관련 함수를 다양한 방식으로 확인해보시오
#
# ex) siginif(pi, digits=3)
#
signif(pi, digit=3)
round(pi, digit=2)
round(pi,digit=-1)
round(pi)
floor(pi)
floor(pi,digit=2)
floor(pi)
ceiling(pi)
trunc(pi)
trunc(-pi)
ceiling(-pi)
trunc(pi)
trunc(-pi)
floor(pi)
floor(-pi)
ceiling(pi)
ceiling(-pi)
trunc(pi)
trunc(-pi)
BMI<-weight/height^2
# 3.
#
# 키: 180, 160, 165, 185, 155
#
# 몸무게:75, 70, 60, 100, 65
#
# BMI를 구하시오. BMI=몸무게(KG)/키(m)제곱
#
# bmi가 25보다 큰 사람의 몸무게를 출력하시오.
#
height<-c(180,160,165,185,155)
weight<-c(75,70,60,100,65)
BMI<-weight/height^2
BMI
# 3.
#
# 키: 180, 160, 165, 185, 155
#
# 몸무게:75, 70, 60, 100, 65
#
# BMI를 구하시오. BMI=몸무게(KG)/키(m)제곱
#
# bmi가 25보다 큰 사람의 몸무게를 출력하시오.
#
height<-c(180,160,165,185,155)/100
weight<-c(75,70,60,100,65)
BMI<-weight/height^2
BMI
BMI>25
BMI[BMI>25]
sum(1:100%%7==0)
x<-1:10
x
(x-mean(x))/sd(x)
a <- 1:20
a
a[c(1,2,5,6,21)] <- 99
a
a[24]<-99
a
# 중간에 빈 공간은 NA로 나옴
a[a<10]
a[c(TRUE,FALSE)]
data <-c(100:110)
data
which(data>105)
which.max(data>105)
which.max(data)
which.min(data)
traffic.death<-c(100,90,80,70,120,150,200) #월~일 사망자 수
traffic.death[6]
names(traffic.death)<-c('mon','tue','wed','thu','fri','sat','sun')
traffic.death['sat']
traffic.death>=100
traffic.death[traffic.death>=100]
review<-c('good','good','bad','indiff','bad','good')
review
review.factor <- factor(review)
review.factor
str(review.factor)
as.numeric(review.factor)
str(review.factor)
str(as.numeric(review.factor)
)
str(as.numeric(review.factor))
as.numeric(review.factor)
# 결과창에 곁따옴표가 없음, level 나옴
review.factor <- factor(review)
# 순서는 알파벳 순서
str(review.factor)
review.factor
as.numeric(review.factor)
review.factor
str(as.numeric(review.factor))
everyday.factor<-factor(everyday, c('mon','tue','wed','thu','fri','sat','sun'))
# 팩터함수를 이용할 때 주의: 보유한 데이터셋에 빠져있는 level이 없는지 확인하기
everyday<-c('mon','mon','wed','fri')
everyday.factor<-factor(everyday, c('mon','tue','wed','thu','fri','sat','sun'))
levels(everyday.factor)
levels(review.factor)<-c('B','G','I')
review.factor
nlevels(review.factor)
length(levels(review.factor))
eval.factor<-factor(eval)
eval<-c('Medium','Low','High','Medium','High')
eval.factor<-factor(eval)
eval.factor
eval.ordered <- factor(eval,levels=c('Low','Medium','High'), ordered=TRUE)
eval.ordered
#table():각 레벨별 빈도
eval.factor
table(eval.factor)
table(eval.ordered)
sex <- c(2,1,2,2,1)
factor(sex, levels=c(1,2), labels=c('Male','Female'))
sex.factor
sex.factor(sex, levels=c(1,2), labels=c('Male','Female'))
sex.factor
sex.factor<-factor(sex, levels=c(1,2), labels=c('Male','Female'))
sex.factor
#label=c()옵션, 숫자형levels에 명칭 붙이기
sex <- c(2,1,2,2,1,0)
sex.factor<-factor(sex, levels=c(1,2), labels=c('Male','Female'))
sex.factor
#label=c()옵션, 숫자형levels에 명칭 붙이기
sex <- c(2,1,2,2,1)
sex.factor<-factor(sex, levels=c(1,2), labels=c('Male','Female'))
sex.factor
#행렬: 2차원 벡터, 벡터에 차원을 부여(dim 함수)
# matrix함수로도 행렬 생성가능
v<-1:12
dim(v)<-c(3,4)
v
dim(v)
matrix(data=v, nrow=3,ncol=4)
b
matrix(data=v, nrow=3,ncol=4)
matrix(data=v, nrow=3,ncol=4,byrow=TRUE)
#리스트
rnames<-c('r1','r2','r3')
cnames<-c('r1','r2','r3')
cnames<-c('c1','c2','c3','c4')
matrix(v,3,4,byrow=TRUE, dimnames = list(rnames,cnames))
matrix(0,3,4)
matrix(NA,3,4)
mat <- matrix(v,ncol=4)
str(mat)
dim(mat)
dim(mat)[1]
nrow(mat)
dim(mat[2])
dim(mat)[2]
ncol(mat)
length(mat)
#벡터가 결합을 통해 행렬생성
v1<- 1:5
v2<-6:10
rbind(v1,v2)
cbind(v1,v2)
cbind(v1,v2,matrix(5:14,5,2))
#행렬과 행렬 결합
matrix(1:6,2,3)
matrix(7:12,2,3)
rbind(matrix(1:6,2,3),matrix(7:12,2,3))
v<- 1:12
mat<-matrix(v,3,4)
amt
mat
mat[1,]
mat[,3]
mat[1,,drop=FALSE]
mat[,1:3]
mat[1:3,]
mat[,c(1,4)]
mat[,-c(2,3)]
mat[1,3]<-77
mat
mat[2,]<-c(22,55,22,55)
mat
mat[2,]<-c(22,55)
mat
mat[2:3,3:4]<-c(1,2,3,4)
mat
mat[2:3,3:4]
mat<-matrix(c(0,350,300,300,200,350,0,50,200,190,300,50,0,180,200,300,200,180,0,80,200,190,200,80,0),5,5,dimnames=list(cities,cities))
cities<-c('seoul','busan',' daegu','gwangju','jeonju')
mat<-matrix(c(0,350,300,300,200,350,0,50,200,190,300,50,0,180,200,300,200,180,0,80,200,190,200,80,0),5,5,dimnames=list(cities,cities))
mat
mat['seoul','busan']
mat[,'seoul']
mat[c('seoul','gwangju'),]
w<-c(1,2,3,4,5,6)
mtx<-matrix(w,2,3)
mtx
#벡터와는 달리 행렬간 연산에서는 반드시 두 행렬의 차원이 같아야 함
a<-matrix(1:6,2,3)
b<- matrix(6:1,3,2)
a+b
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
a<-matrix(1:6,2,3)
b<-matrix(1:6,2,3)
c<-matrix(6:1,3,2)
a+b
a+c
a*b
#행렬의 곱셈
a%*%c
#전치행렬
t(a)
t(t(a))
#행, 열 단위 연산
rowSums(a)
rowMeans(a)
colSums()
colSums(a)
colMeans(a)
y<-seq(3,1,-1)
x<- 1:10
x
y<-seq(3,1,-1)
y
names(x)<-letters[1:10]
x
x+y
a<-c(2,5,3)
a
rep(a,2)
a<-c(2,5,3)
a
rep(a,times=4)
rep(a,length.out=10)
rep(a,each=5)
rep(a,each=c(2,5,3)
rep(a,each=c(2,5,3))
rep(a,each=c(2,5,3))
rep(a,each=c(2,5,3))
a<-c(2,5,3)
a
a
rep(a,times=5)
rep(a,length.out=10)
rep(a,each=c(2,5,3))
rep(a,each=3))
rep(a,each=3)
b<-rep(a,each=3)
b[3]<-5
b[7]<-5
b[10]<-3
b
a<-c(2,5,3)
a
rep(a,times=5)
rep(a,length.out=10)
b<-rep(a,each=3)
b[c(3,7)]<-5
b[10]<-3
b
res<-c(3,2,5,1,5,6,5)
res
res.factor<-factor(res,levels=c(1,2,3,4,5,6),labels = c('one','two','three','four','five','six'))
table(res.factor)
res.factor
nums<-1:12
matrix(nums,3,4,dimnames = c(letters,letters))
matrix(nums,3,4,dimnames = list(letters,letters))
matrix(nums,3,4,dimnames = list(letters[1:3],letters[1:4]))
submat1<-mat[,c(1,3)]
submat2<-mat[,c(2,4)]
cbind(submat1,submat2)
mat<-matrix(nums,3,4,dimnames = list(letters[1:3],letters[1:4]))
submat1<-mat[,c(1,3)]
submat2<-mat[,c(2,4)]
cbind(submat1,submat2)
mat
newmat<-cbind(submat1,submat2)
addmat<-mat+newmat
subsmat<-mat-newmat
mulmat<-mat*newmat
matmulmat<-mat%*%t(newmat)
addmat<-mat+newmat
addmat
subsmat<-mat-newmat
subsmat
mulmat<-mat*newmat
mulmat
matmulmat<-mat%*%t(newmat)
matmulmat
ele<-1:9999
elemat<-matrix(ele,ncol=9)
elemat
nrow(elemat)
subelemat<-elemat[nrow(elemat)-2:nrow(elemat)-2,7:9]
subelemat<-elemat[nrow(elemat)-2:nrow(elemat),7:9]
subelemat
subelemat<-elemat[1109:1111,8:9]
subelemat
