#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
newtrain$Survived<-train$Survived
with(newtrain,tapply(Survived,list(Sex,Age),mean))#남자중에 가족이 있고 어린 남자는 살 확률이 높음
with(newtrain,tapply(Survived,list(Sex,family),mean))
with(newtrain,tapply(Survived,list(Sex,Pclass),mean)) #3등칸에 탄 여자는 죽었을 확률이 높음
#===============================================================================
#Sex
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass!=3,1,0),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass!=3,1,0),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
train[train$Pclass==3&train$Sex==1,]
train[train$Pclass==3 & train$Sex==1,]
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
train_test
train_test[train_test$Pclass==3 & train_test$Sex==1,]
set.seed(2)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
train_train_labels<-train$Survived[-sample_idx]
train_test_labels<-train$Survived[sample_idx]
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
newtrain$Survived<-train$Survived
with(newtrain,tapply(Survived,list(Sex,Age),mean))#남자중에 가족이 있고 어린 남자는 살 확률이 높음
with(newtrain,tapply(Survived,list(Sex,family),mean))
with(newtrain,tapply(Survived,list(Sex,Pclass),mean)) #3등칸에 탄 여자는 죽었을 확률이 높음
#===============================================================================
#Sex
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
train_test[train_test$Pclass==3 & train_test$Sex==1,]
set.seed(1234)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
train_train_labels<-train$Survived[-sample_idx]
train_test_labels<-train$Survived[sample_idx]
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
newtrain$Survived<-train$Survived
with(newtrain,tapply(Survived,list(Sex,Age),mean))#남자중에 가족이 있고 어린 남자는 살 확률이 높음
with(newtrain,tapply(Survived,list(Sex,family),mean))
with(newtrain,tapply(Survived,list(Sex,Pclass),mean)) #3등칸에 탄 여자는 죽었을 확률이 높음
#===============================================================================
#Sex
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
#=============================================================================
#test파일 예측
str(test)
submis<-test$PassengerId
submis
#Sex
test_predict<-with(test,ifelse(Sex==1,1,0))
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/Sex.csv',row.names = F)
#Sex Pclass만 고려
test_predict<-with(test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/SexPclass.csv',row.names = F)
#Sex, Pclass, family,age고려
test_predict<-with(test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/SexPcalssFamilyAge.csv',row.names = F)
# 3. 타이타닉 문제에 대해 knn 적용
str(train)
str(train_train)
train_train<-newtrain[-sample_idx,-5]
train_test<-newtrain[sample_idx,-5]
train_train_labels<-train$Survived[-sample_idx]
train_test_labels<-train$Survived[sample_idx]
train_predict<-knn(train = train_train,test=train_test,
cl=train_train_labels,k=5)
sum(train_predict==train_test_labels)/length(train_test_labels)
train_predict<-knn(train = train_train,test=train_test,
cl=train_train_labels,k=5)
sum(train_predict==train_test_labels)/length(train_test_labels)
train_train
str(train_train)
str(train-test)
str(train_test)
train_train_labels
train_train[-5]
train_predict<-knn(train = train_train[-5],test=train_test[-5],
cl=train_train_labels,k=5)
sum(train_predict==train_test_labels)/length(train_test_labels)
test
str(test)
test_n
newtest
str(newtest)
str(newtrain)
test_predict<-knn(train = newtrain[-5],test = newtest,
cl=newtrain[5]k=5)
test_predict<-knn(train = newtrain[-5],test = newtest,
cl=newtrain[5],k=5)
newtrain[5]
newtrain[-5]
test_predict<-knn(train = newtrain[-5],test = newtest,
cl=newtrain[5],k=5)
newtrain[-5]
newtrain[,-5]
newtrain[1:4]
test_predict<-knn(train = newtrain[1:4],test = newtest,
cl=newtrain[5],k=5)
newtrain[1:4]
newtrain[5]
newtest
str(newtest)
str(newtrain)
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=newtrain[6],k=5)
newtrain[6]
newtrain[-6]
newtest
str(newtest)
str(newtrain)
test
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
#===============================================================================
#Sex
str(train_test)
newtest<-total_n[nrow(train):nrow(total_n),]
str(newtest)
newtest$family<-ifelse(newtest$family=='0',0,1)
as.data.frame(sapply(total_n,as.numeric))
total_n<-as.data.frame(sapply(total_n,as.numeric))
newtrain<-total_n[1:nrow(train),]
newtest<-total_n[nrow(train):nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
set.seed(1234)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
train_train_labels<-train$Survived[-sample_idx]
train_test_labels<-train$Survived[sample_idx]
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
newtrain$Survived<-train$Survived
with(newtrain,tapply(Survived,list(Sex,Age),mean))#남자중에 가족이 있고 어린 남자는 살 확률이 높음
with(newtrain,tapply(Survived,list(Sex,family),mean))
with(newtrain,tapply(Survived,list(Sex,Pclass),mean)) #3등칸에 탄 여자는 죽었을 확률이 높음
#===============================================================================
#Sex
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
newtest
str(newtrain)
str(newtest)
str(test)
#Sex   0.76555
test_predict<-with(test,ifelse(Sex==1,1,0))
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/Sex.csv',row.names = F)
#Sex Pclass만 고려 0.77511
test_predict<-with(test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/SexPclass.csv',row.names = F)
#Sex, Pclass, family,age고려 0.76794
test_predict<-with(test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/SexPclassFamilyAge.csv',row.names = F)
newtrain
str(train_train)
str(train_test)
train_predict<-knn(train = train_train[-6],test=train_test[-6],
cl=train_train_labels,k=5)
sum(train_predict==train_test_labels)/length(train_test_labels)
str(newtest)
str(newtrain)
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=newtrain[6],k=5)
str(newtrain)
newtrain[-6]
newtrain[6]
test_labels=newtrain['Survived']
test_labels
train_labels=newtrain['Survived']
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=train_labels,k=5)
str(newtrain[-6])
str(newtest)
length(train_labels)
train_labels
train_labels=newtrain[,'Survived']
length(train_labels)
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=train_labels,k=5)
submis<-data.frame(PassengerID=test$PassengerId,Survived=test_predict)
write.csv(submis,'data/KNNSexPclassFamilyAge.csv',row.names = F)
train_labels
test_predict
str(newtest)
test$PassengerId
str(test)
newtest
str(newtest)
test$PassengerId
PassengerId<-read.csv('data/test.csv',na.string='')
PassengerId<-PassengerId$PassengerId
submis<-data.frame(PassengerID,Survived=test_predict)
PassengerId
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=train_labels,k=5)
submis<-data.frame(PassengerId,Survived=test_predict)
str(test_predict)
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=train_labels,k=5)
test_predict
submis<-data.frame(PassengerId,Survived=test_predict)
PassengerId<-read.csv('data/test.csv',na.string='')
PassengerId<-PassengerId$PassengerId
PassengerId
length(PassengerId)
train<-read.csv('data/train.csv',na.string='')
test<-read.csv('data/test.csv',na.string='')
#상관관계 살펴보기
# 성별 수량변수로 변화
train$Sex<-ifelse(train$Sex=='female',1,0)
test$Sex<-ifelse(test$Sex=='female',1,0)
#test$Fare -> Pclass,성별 별 평균 fare로 대체
keys<-test[is.na(test$Fare),c('Pclass','Sex')]
P<-keys[[1]]
S<-as.character(keys[[2]])
test$Fare[is.na(test$Fare)]<-as.data.frame(with(test,tapply(Fare,list(Pclass,Sex),mean,na.rm=T)))[P,S]
str(test)
#동승자 여부 범주화
train$family<-train$Parch+train$SibSp
test$family<-test$Parch+test$SibSp
train$family<-ifelse(train$family==0,0,1)
test$family<-test$Parch+test$SibSp
#Age=> 범주화 pclass,성별,fare별 평균
train$Age<-ifelse(train$Age<13,0,1)
test$Age<-ifelse(test$Age<13,0,1)
with(train,tapply(Age,list(Pclass,Sex,family),mean,na.rm=T))
normalize<-function(x){
return((x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T)))
}
str(train)
train_n<-as.data.frame(sapply(train[c('Pclass','Sex','Age','Fare','family')],normalize))
test_n<-as.data.frame(sapply(test[c('Pclass','Sex','Age','Fare','family')],normalize))
str(test)
set.seed(1234)
train_age_model=train_n[!is.na(train_n$Age),]
sample_idx<-sample(1:nrow(train_age_model),nrow(train_age_model)*0.2)
train_train_age=train_age_model[-sample_idx,-3]
train_test_age=train_age_model[sample_idx,-3]
train_age_label=train_age_model[-sample_idx,3]
test_age_label=train_age_model[sample_idx,3]
train_age_predict<-knn(train=train_train_age,test = train_test_age,
cl=train_age_label,k=5)
sum(train_age_predict==test_age_label)/length(test_age_label)
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
str(total_n)
train_age<-total_n[!is.na(total_n$Age),-3]
test_age<-total_n[is.na(total_n$Age),]
train_age_label<-total_n[!is.na(total_n$Age),3]
age_predict<-knn(train = train_age[-3],test=test_age[-3],
cl=train_age_label,k=5)
total_n[is.na(total_n$Age),]<-age_predict
str(total_n)
total_n<-as.data.frame(sapply(total_n,as.numeric))
str(total_n)
train_age<-total_n[!is.na(total_n$Age),-3]
test_age<-total_n[is.na(total_n$Age),]
train_age_label<-total_n[!is.na(total_n$Age),3]
age_predict<-knn(train = train_age[-3],test=test_age[-3],
cl=train_age_label,k=5)
str(total_n)
train_age
train_age_label
train_age
test_age
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
total_n<-as.data.frame(sapply(total_n,as.numeric))
train_age
test_age
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
total_n[is.na(total_n$Age),]
total_n[-3]<-as.data.frame(sapply(total_n[-3],as.numeric))
str(total_n)
train_age<-total_n[!is.na(total_n$Age),-3]
test_age<-total_n[is.na(total_n$Age),]
train_age_label<-total_n[!is.na(total_n$Age),3]
age_predict<-knn(train = train_age[-3],test=test_age[-3],
cl=train_age_label,k=5)
total_n[!is.na(total_n$Age),3]
train_age_label<-as.numeric(total_n[!is.na(total_n$Age),3])
age_predict<-knn(train = train_age[-3],test=test_age[-3],
cl=train_age_label,k=5)
train_age_label
train_age
total_n
train_n
rbind(train_n,test_n)
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
str(total_n)
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
str(total_n)
train_age<-total_n[!is.na(total_n$Age),-3]
str(train_age)
test_age<-total_n[is.na(total_n$Age),]
str(test_age)
train_age_label<-total_n[!is.na(total_n$Age),3]
str(train_age_label)
test_age<-total_n[is.na(total_n$Age),-3]
age_predict<-knn(train = train_age,test=test_age,
cl=train_age_label,k=5)
total_n[is.na(total_n$Age),]<-age_predict
newtrain<-total_n[1:nrow(train),]
newtest<-total_n[nrow(train):nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
str(newtest)
newtest<-total_n[nrow(train)+1:nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
#train set분리=================================================================
set.seed(1234)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
train_train_labels<-train$Survived[-sample_idx]
train_test_labels<-train$Survived[sample_idx]
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
str(newtest)
newtrain$Survived<-train$Survived
with(newtrain,tapply(Survived,list(Sex,Age),mean))#남자중에 가족이 있고 어린 남자는 살 확률이 높음
with(newtrain,tapply(Survived,list(Sex,family),mean))
with(newtrain,tapply(Survived,list(Sex,Pclass),mean)) #3등칸에 탄 여자는 죽었을 확률이 높음
#===============================================================================
#Sex
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex, Pclass, family,age고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),ifelse(family==1&Age==0,1,0)))
sum(train_predict==train_test_labels)/length(train_test_labels)
#=============================================================================
#test파일 예측
str(test)
#Sex   0.76555
test_predict<-with(test,ifelse(Sex==1,1,0))
# 3. 타이타닉 문제에 대해 knn 적용
set.seed(1234)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
str(train_train)
train_train_labels<-newtrain$Survived[-sample_idx]
train_test_labels<-newtrain$Survived[sample_idx]
train_predict<-knn(train = train_train[-6],test=train_test[-6],
cl=train_train_labels,k=5)
sum(train_predict==train_test_labels)/length(train_test_labels)
str(newtrain)
str(newtest)
str(test)
str(newtrain[-6])
str(newtrain)
str(newtest)
#[1] 0.758427
newtrain<-as.data.frame(sapply(newtrain,as.numeric))
newtest<-as.data.frame(sapply(newtest,as.numeric))
str(newtrain)
str(newtest)
newtest
newtest
newtest$family<-ifelse(newtest$family==0,0,1)
newtest<-total_n[nrow(train)+1:nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
newtest
newtest
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
str(total_n)
row.names(total_n)=NULL
train_age<-total_n[!is.na(total_n$Age),-3]
str(train_age)
test_age<-total_n[is.na(total_n$Age),-3]
str(test_age)
train_age_label<-total_n[!is.na(total_n$Age),3]
str(train_age_label)
age_predict<-knn(train = train_age,test=test_age,
cl=train_age_label,k=5)
total_n[is.na(total_n$Age),]<-age_predict
newtrain<-total_n[1:nrow(train),]
newtest<-total_n[nrow(train)+1:nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
str(newtrain)
str(newtest)
newtest<-total_n[892:nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
str(newtrain)
str(newtest)
#범주형age 예측======================================================================
total_n=rbind(train_n,test_n)
str(total_n)
train_age<-total_n[!is.na(total_n$Age),-3]
str(train_age)
test_age<-total_n[is.na(total_n$Age),-3]
str(test_age)
train_age_label<-total_n[!is.na(total_n$Age),3]
str(train_age_label)
age_predict<-knn(train = train_age,test=test_age,
cl=train_age_label,k=5)
total_n[is.na(total_n$Age),]<-age_predict
newtrain<-total_n[1:nrow(train),]
newtest<-total_n[892:nrow(total_n),]
newtest$family<-ifelse(newtest$family==0,0,1)
str(newtrain)
str(newtest)
newtrain<-as.data.frame(sapply(newtrain,as.numeric))
newtest<-as.data.frame(sapply(newtest,as.numeric))
str(newtrain)
str(newtest)
#train set분리=================================================================
set.seed(1234)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
train_train_labels<-train$Survived[-sample_idx]
train_test_labels<-train$Survived[sample_idx]
#=============================================================================
#범주형 특성 별 생존률 차이 살펴보기
str(newtrain)
str(newtest)
newtrain$Survived<-train$Survived
with(newtrain,tapply(Survived,list(Sex,Age),mean))#남자중에 가족이 있고 어린 남자는 살 확률이 높음
with(newtrain,tapply(Survived,list(Sex,family),mean))
with(newtrain,tapply(Survived,list(Sex,Pclass),mean)) #3등칸에 탄 여자는 죽었을 확률이 높음
#===============================================================================
#Sex
train_predict<-with(train_test,ifelse(Sex==1,1,0))
sum(train_predict==train_test_labels)/length(train_test_labels)
#Sex Pclass만 고려
train_predict<-with(train_test,ifelse(Sex==1,ifelse(Pclass==3,0,1),0))
sum(train_predict==train_test_labels)/length(train_test_labels)
str(newtrain)
str(newtest)
str(newtrain[-6])
train_labels=newtrain[,'Survived']
PassengerId<-read.csv('data/test.csv',na.string='')
PassengerId<-PassengerId$PassengerId
test_predict<-knn(train = newtrain[-6],test = newtest,
cl=train_labels,k=5)
submis<-data.frame(PassengerId,Survived=test_predict)
write.csv(submis,'data/KNNSexPclassFamilyAge.csv',row.names = F)
# 3. 타이타닉 문제에 대해 knn 적용
set.seed(1234)
sample_idx<-sample(1:nrow(train),nrow(train)*0.2)
train_train<-newtrain[-sample_idx,]
train_test<-newtrain[sample_idx,]
str(train_train)
str(train_test)
train_train_labels<-newtrain$Survived[-sample_idx]
train_test_labels<-newtrain$Survived[sample_idx]
train_predict<-knn(train = train_train[-6],test=train_test[-6],
cl=train_train_labels,k=5)
sum(train_predict==train_test_labels)/length(train_test_labels)
