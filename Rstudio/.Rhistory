center(x,'trimmed') #절사평균
center(x,'other') #절사평균
x<-c(1:8,100,-200)
center(x,'mean')
center(x,'median')
center(x,'trimmed') #절사평균
#===============================================================
# 반복문
# 1.repeaet
i<-5
repeat{if(i>25)break
else{
print(i)
i<-i+5
}}
while(i>25){
print(i)
i<-i+5
}
while(i<=25){
print(i)
i<-i+5
}
5
while(i<=25){
print(i)
i<-i+5
}
i<-5
while(i<=25){
print(i)
i<-i+5
i<-5
while(i<=25){
print(i)
i<-i+5
i<-5
while(i<=25){
print(i)
i<-i+5
}
i<-5
while(i<=25){
print(i)
i<-i+5
}
for(i in seq(from=5,to=25,by=5))
for(i in seq(from=5,to=25,by=5))
print(i)
for(i in seq(from=5,to=25,by=5))
print(i)
#===============================================================
# 반복문
# 1.repeaet{if(탈출조건)break else{반복문}}
i<-5
repeat{if(i>25)break
else{
print(i)
i<-i+5
}
}
i<-5
while(i<=25){
print(i)
i<-i+5
}
for(i in seq(from=5,to=25,by=5))
print(i)
}
)
#===============================================================
# 반복문
# 1.repeaet{if(탈출조건)break else{반복문}}
i<-5
repeat{if(i>25)break
else{
print(i)
i<-i+5
}
}
i<-5
while(i<=25){
print(i)
i<-i+5
}
for(i in seq(from=5,to=25,by=5))
print(i)
# 3.for(변수 in 리스트) 반복문
for(i in seq(from=5,to=25,by=5))
i
print(i)
for(i in seq(from=5,to=25,by=5))
i
print(i)
# 3.for(변수 in 리스트) 반복문
for(i in seq(from=5,to=25,by=5))
print(i)
for(i in seq(from=5,to=25,by=5))
i
#  2. for 문이 종료된 이후에도 변수는 사라지지 않는다.
i<-1
for(i,seq(from=5,to=25,by=5))i
for(i in seq(from=5,to=25,by=5))i
print(i)
# mode: 데이터 유형(숫자, 문자, 논리, 리스트, 함수)
mode(3.14)
mode(c(3.14,1.5))
mode('Batman')
mode(c('Batman','Superman','Somun'))
mode(factor('High','Med','Low'))
mode(as.Date('2021-03-02'))
mode*
mode(5>2)
mode(5>2)
mode(list(1.2,'apple',c(3,4)))
mode(mean)
d<-as.Date('2021-03-02')
d+1
as.integer(d)
length(d)
as.numeric(1.618)
mode(1.618)
as.integer(1.618)
as.character(1.618)
as.numeric('test')
as.numeric('1.234')
mode(as.numeric('1.234'))
as.numeric('1.234','test')
as.numeric(c('1.234','test'))
as.numeric('1.234')
mode(10:20)
as.character(10:20)
as.numeric(TRUE)
as.numeric(F)
sum(c(T,F,T))
sum(c(1,3,5,7,9)>4)
#리스트 -> 분석 모델에서 요구하는 타입이 데이터프레임일 때
x<-list(1,2,3,4,5)
as.data.frame(x)
as.list(x)
vec<-1:6
vec
length(vec)
as.list(vec)
list(vec)
# merge(df1,df2)
# 디폴트=> 모든 feature를 다 갖고 있는 데이터 행만 출력
rich.states
large.states
merge(rich.states,large.states)
#all=TRUE 옵션 없는 feature은 NA로
merge(rich.states,large.states,all = TRUE)
#벡터를 행렬로 변환: cbind(),as.matrix(),rbind()
cbind(vec)
as.matrix(vec)
rbind(vec)
as.matrix(vec,ncol=1
as.matrix(vec,ncol=1)
as.matrix(vec,ncol=1)
as.matrix(vec,nrow=1)
as.matrix(vec,1)
as.matrix(vec,2)
as.matrix(vec)
matrix(vec,2,3)
as.data.frame(vec)
as.array(vec)
vec
as.data.frame(rbind(vec))
rbind(vec)
rbind(vec) #vector -> matrix ->df
class(rbind(vec))
mat<-matrix(1:6,3,2)
mat
as.data.frame(mat)
as.vector(mat)
as.list(mat)
list(mat)
lst<-list(odd=c(1,3,5),even=c(2,4,6))
lst
unlist(lst)
as.vector(lst)
identical(lst,as.vector(lst))
lst2<-list(odd=c(1,3,5),even=c('two','four','six'))
lst2
unlist(lst2)
class(unlist(lst2))
unlist(lst2)
#리스트->행렬: unlist ->벡터를 행렬로 변환
matrix(lst)
#리스트->행렬: unlist ->벡터를 행렬로 변환
matrix(lst,2,3)
lst
#리스트->행렬: unlist ->벡터를 행렬로 변환
as.matrix(lst)
#리스트->행렬: unlist ->벡터를 행렬로 변환
unlist(lst)
lstvec<-unlist(lst)
matrix(lstvec,3,2)
lstvec<-unlist(lst)
matrix(lstvec,3,2)
#리스트->행렬: unlist ->벡터를 행렬로 변환
matrix(lst,2,3)
lstvec<-unlist(lst)
matrix(lstvec,3,2)
#dimnames인수 활용
matrix(lstvec,3,2,dimnames = list(NULL,names(lst)))
#as.dataframe함수: 리스트 -> 데이터프레임으로 변환
#숫자와 문자가 섞여 있으면, 숫자-> 숫자벡타, 문자->문자벡터
lst<-list(odd=c(1,3,5),even=c(2,4,6))
lstdf<-as.data.frame(lst)
str(lstdf)
#as.dataframe함수: 리스트 -> 데이터프레임으로 변환
#숫자와 문자가 섞여 있으면, 숫자-> 숫자벡타, 문자->문자벡터
lst<-list(odd=c(1,3,5),even=c('two','four','six'))
lstdf<-as.data.frame(lst)
str(lstdf)
df1<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df1
as.vector(df1)
as.matrix(df1)
as.list(df1)
df1[1,]
str(df1[1,])
str(df[,1])
df[2]
df[1]
str(df[1])
df[[1]]
str(df1[,1]) #열은 벡터로
str(df1[1])  #데이터프레임으로 열 추출
df1[[1]]
str(df1[[1]])
#데이터프레임이 하나의 행 또는 하나의 열로 구성된 경우
#데이터프레임 전체를 벡터로 변환
#데이터프레임 -> 행렬 ->as.vector사용하여 벡터로 변환
df2
#데이터프레임이 하나의 행 또는 하나의 열로 구성된 경우
#데이터프레임 전체를 벡터로 변환
#데이터프레임 -> 행렬 ->as.vector사용하여 벡터로 변환
df2<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df2
as.vector(df2)
as.matrix(df2)
as.vector(as.matrix(df2))
mat<-matrix(1:6,3,2)
as.vector(mat)
as.list(mat)
list(mat)
as.data.frame(mat)
df3<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
as.matrix(df3)
as.vector(as.matrix(df3))
as.list(df3)
lisst(df3)
list(df3)
str(as.list(df3))
#데이터프레임->행렬 as.matrix()
#문자, 숫자 섞여있으면 모두 문자로 변환됨
df3
as.matrix(df3)
#1.
months
#1.
month
for (i in month)print('The month of',i)
for (i in month)print(paste('The month of',i))
paste('The month of',month)
#9.
dan<-1:9
mul<-1:9
for(i in dan)print(dan*mul)
for(i in dan)print(i*mul)
for(i in dan)print(c(i,"단",i*mul))
for(i in dan)print(paste(c(i,"단",i*mul),collapse=''))
for(i in dan)print(paste(c(i,"단",i*mul),collapse=' '))
#factorial 만들기
fact<-function(x){
res=1
while(x>=1){
res*=x
}
return(res)
}
#factorial 만들기
fact<-function(x){
res=1
while(x>=1){
res=res*x
}
return(res)
}
fact(5)
print(fact(5))
#9.
dan<-1:9
#9.
dan<-1:9
mul<-1:9
for(i in dan)print(paste(c(i,"단",i*mul),collapse=' '))
#factorial 만들기
fact<-function(x){
res=1
for(i in 1:x)res=res*i
return(res)
}
fact(10)
fact(5)
fact(6)
fact(1)
fact(2)
fact(3)
# 2. 짝수이면 TRUE, 홀수이면 FALSE를 출력하는 함수 작성.
# 다음 벡터로 테스트하시오.
# c(-5:5)
iseven<-function(x){
if(x%%2==0){
print(TRUE)
}
print(FALSE)
}
iseven(1:6)
iseven(3)
iseven(3:6)
# 2. 짝수이면 TRUE, 홀수이면 FALSE를 출력하는 함수 작성.
# 다음 벡터로 테스트하시오.
# c(-5:5)
iseven<-function(x){
ifelse(x%%2==0,TRUE,FALSE)
}
iseven(1:6)
counteven<-function(x){
sum(ifelse(x%%2==0,TRUE,FALSE))
}
counteven(1:6)
counteven(1:7)
counteven(1:8)
#
# 4. 주어진 숫자가 원주율보다 크면 TRUE, 아니면 FALSE를 출력하는 함수 작성.
# 3과 1:5 벡터에 대해 테스트하시오
bigpi<-function(x){
ifelse(x>pi,TRUE,FALSE)
}
bigpi(3)
bigpi(1:5)
df_midterm<-data.frame()
english<-c(90,80,60,70)
math<-c(50,60,100,20)
class(1,1,2,2)
df_midterm<-data.frame(english,math,class)
df_midterm<-data.frame(c(english,math,class))
english<-c(90,80,60,70)
math<-c(50,60,100,20)
class(1,1,2,2)
class<-c(1,1,2,2)
df_midterm<-data.frame(english,math,class)
df_midterm
df_midterm.english
colMeans(df_midterm)
rowMeans(df_midterm)
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-1:2*i-1
print(character(vec))
}
print(vec)
while
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-1:2*i-1
print(vec)
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-1:2*i-1
print(vec)
i=i+1
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-1:(2*i-1)
print(vec)
i=i+1
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-1:(2*i-1)
print(as.character(vec))
i=i+1
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-as.character(1:(2*i-1))
gsub('\\d','*',vec)
i=i+1
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-as.character(1:(2*i-1))
print(gsub('\\d','*',vec))
i=i+1
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-as.character(1:(2*i-1))
print(gsub('\\d','*',vec),sep='')
i=i+1
}
while(i<=4){
vec<-as.character(1:(2*i-1))
print(paste(gsub('\\d','*',vec),collapse=''))
i=i+1
}
# 9. 반복문을 활용하여 출력하시오
# *
#   ***
#   *****
#   *******
i=1
while(i<=4){
vec<-as.character(1:(2*i-1))
print(paste(gsub('\\d','*',vec),collapse=''))
i=i+1
}
#   10.  타이타닉 데이터 전처리
titanichw<-read.csv('data/train.csv')
titanichw
english<-c(90,80,60,70)
math<-c(50,60,100,20)
class<-c(1,1,2,2)
df_midterm<-data.frame(english,math,class)
colMeans(df_midterm[-3])
rowMeans(df_midterm[-3])
df_midterm<-data.frame(english,math,class)
df_midterm
colMeans(df_midterm[-3])
rowMeans(df_midterm[-3])
#   10.  타이타닉 데이터 전처리
titanichw<-read.csv('data/train.csv',na.strings = "")
titanichw
# - Surived 컬럼의 타입을 확인하시오.
class(titanichw$Survived)
mode(titanichw$Survived)
typeof(titanichw$Survived)
# - Surived 컬럼의 타입을 확인하시오.
str(titanichw)
# - Survived 컬럼의 타입을 factor 타입으로 바꾸어 저장하시오
titanichw$Survived<-factor(titanichw$Survived)
class(titanichw$Survived)
str(titanichw)
write.csv(titanichw,'data/SFtitanic.csv')
str(read.csv('data/SFtitanic.csv',na.strings = ""))
str(read.csv('data/SFtitanic.csv',na.strings = ""))
# - Survived 컬럼의 타입을 factor 타입으로 바꾸어 저장하시오
titanichw$Survived<-factor(titanichw$Survived)
class(titanichw$Survived)
str(titanichw)
write.csv(titanichw,'data/SFtitanic.csv')
str(read.csv('data/SFtitanic.csv',na.strings = ""))
is.factor(titanichw$Survived)
#paste()
#sep='' 옵션으로 연결자 선택 가능 default는 띄어쓰기
#문자열 벡터 결합 함수 -> 하나의 문자열로 생성
#여러개의 벡터가 인수인 경우, 요소간 결합
#벡터간 길이 불일치: 재사용 규칙 적용
paste('Everybody','wants','to','fly')
paste(c('Everybody','wants','to','fly'))
