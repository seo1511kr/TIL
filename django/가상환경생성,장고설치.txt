1. cmd
2. cd\
3. mkdir venvs
     4.cd venvs
4. python -m venv mysite
     ---------------------가상환경 생성---------------
       6.cd my*
       7.cd Scr*
       8.activate
       (mysite) C:\venvs\mysite\Scripts>
       --------------------가상환경에 입장--------------
       9.pip install django==3.1.3
5. python -m pip install --upgrade pip
   ------------------장고설치&pip업그레이드-------
6. cd\
7. mkdir project
8. cd project
   ------------프로젝트 디렉토리 생성----------------
9. exit
10. cmd
11. C:\Users\i>cd\project
12. C:\project>C:\venvs\mysite\Scripts\activate
      18.(mysite) C:\project>mkdir mysite
      19.(mysite) C:\project>cd mysite
      20.(mysite) C:\project\mysite>django-admin startproject config .
      21.(mysite) C:\project\mysite>deactivate
13. C:\project\mysite>dir/w 명령 수행시, [config]와 manage.py가 있어야 함.
14. cd con*
15. C:\project\mysite\config>dir/w
      --------------프로젝트 구성 완료----------------------

===============================================
장고 웹 서버 구동
1. C:\venvs\mysite\Scripts\activate
2. (mysite) C:\project\mysite\config>cd..
3. (mysite) C:\project\mysite>python manage.py runserver
Watching for...
You have 18 unapplied migration(s)....
Django version 3.1.3, using settings 'config.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

#### 4. 웹브라우저를 띄운 후 

http://127.0.0.1:8000/ 주소를 입력

#### 5. DB

config\settings.py에 

*DATABASES항목: 자료구조 json(dict안에 dict)
*sqlite는 mysql을 슬림화 시킨 미니데이타베이스
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


6. runserver했을 때 경고메시지
admin, auth, sessions 등의 앱이 필요로하는 테이블을 생성해야함
테이블(학교)? 데이터(학생1명)를 저장하기 위한 데이터 집합의 모음
데이터베이스(전국의 학교)는 테이블,...의 모음

데이터베이스관리시스템:데이터베이스를 관리하는 프로그램
sqlite, 몽고, mysql, mssql, oracle,...

#### 7.DB관리

python manage.py migrate
sqlite 설치 -> DB Browser for SQLite(도구) -> 데이터관리
sqlitebrowser.org/dl

local C => programfiles => db => dbbrowser for sqlite 바탕화면 바로가기 만들기

파일메뉴=>데이터베이스열기=> project\mysite\dq.sqlite3열기
원래는 db조작하려면 quary문을 배워야 함
-sql을 모르는 왕초보도 장고의 ORM(Object Relational Mapping)
(파이썬으로 데이터 작업을 할 수 있는 ORM이 우리를 대신하여 SQL문 생성->실행)
quary문의 단점:쿼리문의 일관성이 없음, 잘못된 퀴리문의 실행으로 인해 시스템이 저하될 수 있음.
db를 변경하는 경우, 변경전에 작성된 퀴리문이 변경 후의 db에서 실행이 잘 안되는 경우가 발생할 수 있음
==> 그래서, 장고의 ORM은 위에 열거된 단점들을 극복

cf)
#### 8. 모델이란?
머신러닝 모델: 빅데이터 환경에서 데이터들 사이의 규칙(패턴)을 발견하여 함수(수식)을 생성
새롭게 입력된 값에 대한 예측값이나 분류결과를 도출해내기 위한 함수

장고에서의 모델: 데이터 관리(저장,검색...)
ex)장고 질문/답변 모댈: 질문/답변 데이터 관리 모델

질문모델구성요소:질문의 제목, 질문 내용, 질문 작성일...
답변모델구성요서: 질문, 답변내용,답변작성일 등

클라이언트가 남긴 질문, 답변들이 db에 저장

class 정의하기
https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-types여기서 참고

models.py 들어가서

models.CharFiled(max_length=200)
models.TextField()
models.DateTimeField()

models.ForeignKey() #모델간의 연결을 적용시키는 함수 ex.질문과 답변 모델을 연결





#### 9.장고는 모델을 이용하여 테이블 생성

=============================================================================

새롭게 테이블 생성/수정하는 경우에는 

먼저 테이블 작업을 위한 파일을 생성한 다음 테이블을 생성해야 함

`(mysite) C:\Users\19178\project\mysite>python manage.py makemigrations`

(테이블 작업을 위한 파일을 생성:  mybo\migrations\0001_initial.py이 생성됨)



=============================================================================

```
(mysite) C:\Users\19178\project\mysite>python manage.py makemigrations
Migrations for 'mybo':
  mybo\migrations\0001_initial.py

   - Create model Question
     - Create model Answer

(mysite) C:\Users\19178\project\mysite>
(mysite) C:\Users\19178\project\mysite>
```



=============================================================================

cmd

`(mysite) C:\Users\19178\project\mysite>python manage.py migrate`

테이블 생성

=============================================================================

```Operations to perform:
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, mybo, sessions
Running migrations:

  Applying mybo.0001_initial... OK
```

=> 테이블이 생성됨


![image-20210202141840421](가상환경생성,장고설치.assets/image-20210202141840421.png)

=============================================================================

#### 10. 데이터 생성/저장/조회

1) 장고 쉘 실행

`(mysite) C:\Users\19178\project\mysite>python manage.py shell`

```
Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>>
```

`from mybo.models import Question, Answer`



2) Question클래스의 질문(객체) 생성하여 데이터베이스(질문 테이블)에 저장

```
from django.utils import timezone
q=Question(subject="질문제목", content="질문내용", create_date=timezone.now())
q.save()
```



3) 질문 데이터 확인, 전체 데이터 객체 확인


```
>>> q
<Question: Question object (2)> (:저장 순서에 맞게 저절로 id가 생김)
>>> q.id
2
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>, <Question: Question object (2)>]>
```



4)모델 내용 변경시 장고 쉘 재시작

<QuerySet [<Question: Question object (1)>, <Question: Question object (2)>]>

은 객체가 잘 보이지 않음 => Question객체에 method 추가후 장고 쉘 종료했다가 재접속

​			

![image-20210202153719020](가상환경생성,장고설치.assets/image-20210202153719020.png)

```
quit()
python manage.py shell
from mybo.models import Question, Answer
Question.objects.all()

<QuerySet [<Question: mybo가 뭔가요?>, <Question: what is django model?>]>
```

* makemigrations, migrate 명령을 사용하는 경우 

-모델 속성 추가 혹은 변경

* shell 종료후 재접속하는 경우

단순 메소드만 추가하는 경우

====================================================================

5-1)  id로 특정 데이터 참조하기

```
>>> Question.objects.filter(id=1)	#(id=1에 해당하는 여러 자료를 다 확인, list구조)
<QuerySet [<Question: mybo가 뭔가요?>]>
>>> Question.objects.get(id=1)		#(id=1에 해당하는 한 건의 데이터만 가져옴)
<Question: mybo가 뭔가요?>
```
Question.objects.filter(id=3)

```
# 없는 자료를 참조해도 error가 나오지 않고 비어있는 list가 출력됨

>>> Question.objects.filter(id=3)
<QuerySet []>
```
Question.objects.get(id=3)

```
# 없는 자료를 참조하면 DoesNotExist에러가 발생

>>> Question.objects.get(id=3)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\19178\venvs\mysite\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\19178\venvs\mysite\lib\site-packages\django\db\models\query.py", line 429, in get
    raise self.model.DoesNotExist(
mybo.models.Question.DoesNotExist: Question matching query does not exist.
```

5-2)  속성에 특정 단어를 포함한 데이터 참조

```
>>> Question.objects.filter(subject__contains='mybo')  #subject는 는 속성명
<QuerySet [<Question: mybo가 뭔가요?>]>
```



#### 11. 데이터 변경 및 삭제

* 쉘에서 데이터 속성 변경하기

```
>>> Question.objects.get(id=2)
<Question: what is django model?>

>>> q=Question.objects.get(id=2)		#object를 q 변수에 저장
>>> q.subject="Django Model Question"	#subject 변경
>>> q.save()   							#save() 반드시 해줘야 반영됨

>>> q
<Question: Django Model Question> 		#변경내용 확인
>>> Question.objects.get(id=2)
<Question: Django Model Question>
```

* 데이터 삭제하기

```
>>> q.delete()				#mybo.Question에서 1개가 삭제되었다 라는 뜼
(1, {'mybo.Question': 1})	#삭제의 경우에는 따로 save()해주지 않아도 됨

```



* cf) 모델간 연결(models.ForeignKey()함수 사용) +on_delete=models.CASCADE 옵션

![image-20210202155958332](가상환경생성,장고설치.assets/image-20210202155958332.png)

```
on_delete=models.CASCADE #질문이 제거되면 동시에 답변도 삭제된다는 의미
```

```
>>> q=Question.objects.get(id=1)
>>> from django.utils import timezone

>>> a=Answer(question=q, content="the answer of question no2", create_date=timezone.now())	#객제 생성
>>> a.save()					#저장 필수

>>> a							#데이터 확인
<Answer: Answer object (1)>
>>> a.id
1
>>> Answer.objects.get(id=1)
<Answer: Answer object (1)>
```

* 속성 참조하기(답변과 연결된 질문)

```
>>> a.question
<Question: mybo가 뭔가요?>
>>> a.create_date
datetime.datetime(2021, 2, 2, 7, 21, 16, 49547, tzinfo=<UTC>)
```

* 질문과 연결된 답변 확인하기

```
>>> q.answer_set.all()		# _set.all(): 질문에 연결된 답변은 여러개일 수 있음
<QuerySet [<Answer: Answer object (1)>]>
```



#### 12. 관리자 계정 만들기

```
(mysite) C:\Users\19178\project\mysite>python manage.py createsuperuser

사용자 이름 (leave blank to use '19178'): admin
이메일 주소: admin@mysite.com
Password:
Password (again):
비밀번호가 너무 짧습니다. 최소 8 문자를 포함해야 합니다.
비밀번호가 너무 일상적인 단어입니다.
비밀번호가 전부 숫자로 되어 있습니다.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.
```

localhost:8000/admin 접속 후 관리자 계정 로그인

#### admin 페이지에 mybo 추가하기

```
from django.contrib import admin
from .models import Question     #models.py에서 Question 클래스를 받아서

# Register your models here.

admin.site.register(Question)    #admin.site에 등록
```

![image-20210202165012298](가상환경생성,장고설치.assets/image-20210202165012298.png)